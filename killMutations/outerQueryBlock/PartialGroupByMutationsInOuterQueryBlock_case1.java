package killMutations.outerQueryBlock;

import generateConstraints.GenerateCommonConstraintsForQuery;
import generateConstraints.GenerateConstraintsForConjunct;
import generateConstraints.GenerateConstraintsForHavingClause;
import generateConstraints.GenerateConstraintsForPartialMultipleGroup;
import generateConstraints.GenerateGroupByConstraints;

import java.util.ArrayList;
import java.util.HashMap;

import parsing.Conjunct;
import parsing.Node;
import testDataGen.GenerateCVC1;
import testDataGen.QueryBlockDetails;
import util.TagDatasets;

/**
 * This class Generates data to kill partial group by mutations inside outer block of the query
 * @author mahesh
 *
 */
public class PartialGroupByMutationsInOuterQueryBlock_case1 {

	/**
	 * Generates data sets for killing partial group by attributes
	 * The data sets generated by this function are only capable of killing the mutations only if the group by attribute is projected in select list 
	 * @param cvc
	 */
	public static void generateDataForkillingParialGroupByMutationsInOuterQueryBlock(GenerateCVC1 cvc) throws Exception{
		
		/** keep a copy of this tuple assignment values */
		HashMap<String, Integer> noOfOutputTuplesOrig = (HashMap<String, Integer>) cvc.getNoOfOutputTuples().clone();
		HashMap<String, Integer> noOfTuplesOrig = (HashMap<String, Integer>) cvc.getNoOfTuples().clone();
		HashMap<String, Integer[]> repeatedRelNextTuplePosOrig = (HashMap<String, Integer[]>)cvc.getRepeatedRelNextTuplePos().clone();
		
		/**Get outer query block */
		QueryBlockDetails outer = cvc.getOuterBlock();

		System.out.println("\n----------------------------------");
		System.out.println("GENERATE DATA FOR KILLING PARTIAL GROUP BY MUTATION IN OUTER BLOCK OF QUERY: " + outer);
		System.out.println("----------------------------------\n");
		
		
		/**Get group by nodes of this query block*/
		ArrayList<Node> groupbyNodes = (ArrayList<Node>)outer.getGroupByNodes().clone();
		
		/**kill each group by attribute at a time*/
		for(Node tempgroupByNode : groupbyNodes){
			
			System.out.println("\n----------------------------------");
			System.out.println("KILLING PARTIAL GROUP BY MUTATIONS IN OUTER BLOCK OF QUERY: " + tempgroupByNode);
			System.out.println("\n----------------------------------");
			
			/** Initialize the data structures for generating the data to kill this mutation */
			cvc.inititalizeForDataset();		
			
			/**set the type of mutation we are trying to kill*/
			cvc.setTypeOfMutation( TagDatasets.MutationType.PARTIALGROUPBY1, TagDatasets.QueryBlock.OUTER_BLOCK );
			
			/** get the tuple assignment for this query
			 * If no possible assignment then not possible to kill this mutation*/
			if(GenerateCVC1.tupleAssignmentForQuery(cvc) == false)
				continue;
			
					
			/**We need to generate two groups for this query block,
			 *  we should update the total number of tuples data structure*/
			cvc.updateTotalNoOfOutputTuples(cvc.getOuterBlock(), 2);
			
			
			/** Add constraints for all the From clause nested sub query blocks */
			for(QueryBlockDetails qb: cvc.getOuterBlock().getFromClauseSubQueries()){						
				cvc.getConstraints().add("\n%---------------------------------\n% FROM CLAUSE SUBQUERY\n%---------------------------------\n");

				cvc.getConstraints().add( QueryBlockDetails.getConstraintsForQueryBlock(cvc, qb) );

				cvc.getConstraints().add("\n%---------------------------------\n% END OF FROM CLAUSE SUBQUERY\n%---------------------------------\n");						
			}
			
			/** get constraints for this sub query block except group by clause constraints*/
			/** Add the positive conditions for each conjunct of this query block */
			for(Conjunct conjunct : outer.getConjuncts()){
				cvc.getConstraints().add("\n%---------------------------------\n% CONSTRAINTS FOR THIS CONJUNCT\n%---------------------------------\n");
				cvc.getConstraints().add( GenerateConstraintsForConjunct.getConstraintsForConjuct(cvc, outer, conjunct) );
				cvc.getConstraints().add("\n%---------------------------------\n% END OF CONSTRAINTS FOR THIS CONJUNCT\n%---------------------------------\n");				
			}
			
			/**Add other related constraints for outer query block */
			cvc.getConstraints().add( QueryBlockDetails.getOtherConstraintsForQueryBlock(cvc, outer) );
			
			/** add same group by constraints for this query block */
			cvc.getConstraints().add( "\n%-----------------------------------------------------------------------------------------\n%GROUP BY ATTRIBUTES MUST BE SAME IN SAME GROUP\n%--------------------------------------------------------------\n");				
			cvc.getConstraints().add( GenerateGroupByConstraints.getGroupByConstraints(cvc, groupbyNodes, false, outer.getNoOfGroups()) );
			
			/** Generate havingClause constraints for this sub query block*/
			cvc.getConstraints().add("\n%---------------------------------\n%HAVING CLAUSE CONSTRAINTS FOR SUBQUERY BLOCK\n%---------------------------------\n");
			for(int j=0; j< outer.getNoOfGroups();j ++)
				for(int k=0; k < outer.getAggConstraints().size();k++){
					cvc.getConstraints().add( GenerateConstraintsForHavingClause.getHavingClauseConstraints(cvc, outer, outer.getAggConstraints().get(k), outer.getFinalCount(), j));
				}
			cvc.getConstraints().add("\n%---------------------------------\n%END OF HAVING CLAUSE CONSTRAINTS FOR SUBQUERY BLOCK\n%---------------------------------\n");
			
			/** add  constraints to kill this mutation */
			cvc.getConstraints().add( "\n%-----------------------------------------------------------------------------------------\n%CONSTRAINTS TO KILL PARTIAL GROUP BY MUTATIONS WITH MULTIPLE GROUPS\n%--------------------------------------------------------------\n");
			cvc.getConstraints().add( GenerateConstraintsForPartialMultipleGroup.getConstraintsForPartialMultipleGroup(cvc, outer, tempgroupByNode) );
			cvc.getConstraints().add( "\n%-----------------------------------------------------------------------------------------\n%END OF CONSTRAINTS TO KILL PARTIAL GROUP BY MUTATIONS WITH MULTIPLE GROUPS\n%--------------------------------------------------------------\n");
			
			/** Call the method for the data generation*/
			GenerateCommonConstraintsForQuery.generateDataSetForConstraints(cvc);
		}
		
		/** Revert back to the old assignment */
		cvc.setNoOfTuples( (HashMap<String, Integer>) noOfTuplesOrig.clone() );
//		cvc.setNoOfOutputTuples( (HashMap<String, Integer>) noOfOutputTuplesOrig.clone() );
		cvc.setRepeatedRelNextTuplePos( (HashMap<String, Integer[]>)repeatedRelNextTuplePosOrig.clone() );
	}

}
